AWSTemplateFormatVersion: 2010-09-09

Description: Basic template that defines a single Amazon EC2 instance tied to an existing security group.

Parameters:

  WorkspaceCIDR:
    Description: The CIDR block of your workspace "http://checkip.amazonaws.com/"
    Type: String
    Default: "3.83.200.219/32"

  VpcId:
    Description: VPC id
    Type: String
    Default: vpc-01adb3d08c7751eae

  PublicSubnet:
    Description: Public Subnet Id where instance will create
    Type: String
    Default: subnet-0a5428b0215c25db5

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: Scrumblr demo
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.

Resources:

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable SSH access via port 22 and http access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref WorkspaceCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref WorkspaceCIDR
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref WorkspaceCIDR

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
          - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-0d5eff06f840b45e9
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            # Sleep for the instance role might not be properly attached
            sleep 10

            # INSTALL git
            sudo yum -y install git

            # INSTALL redis
            sudo amazon-linux-extras install redis6

            # INSTALL nodejs
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install node
            # make sure ec2-user has nvm access
            cat <<EOF >> /home/ec2-user/.bashrc
            export NVM_DIR="/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            EOF
            node -e "console.log('Running Node.js ' + process.version)"

            # Install scrumblr
            git clone https://github.com/aliasaria/scrumblr.git
            cd scrumblr
            npm install

            # Start redis server
            redis-server --daemonize yes

            # Start scrumblr on port 80
            node server.js --server:port=80 &
          - {
            }

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]